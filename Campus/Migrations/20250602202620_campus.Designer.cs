// <auto-generated />
using Campus;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Campus.Migrations
{
    [DbContext(typeof(CampusContext))]
    [Migration("20250602202620_campus")]
    partial class campus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Campus.Model.Course", b =>
                {
                    b.Property<string>("IdCourse_code")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Course_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("IdTeacher_code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer");

                    b.HasKey("IdCourse_code");

                    b.HasIndex("IdTeacher_code");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Campus.Model.School", b =>
                {
                    b.Property<string>("IdSchool_code")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdSchool_code");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("Campus.Model.Student", b =>
                {
                    b.Property<string>("IdStudent_code")
                        .HasColumnType("text");

                    b.Property<string>("FiscalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdSchool_code")
                        .IsRequired()
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdStudent_code");

                    b.HasIndex("IdSchool_code");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Campus.Model.Teacher", b =>
                {
                    b.Property<string>("IdTeacher_code")
                        .HasColumnType("text");

                    b.Property<string>("FiscalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdSchool_code")
                        .IsRequired()
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdTeacher_code");

                    b.HasIndex("IdSchool_code");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("StudentCourses", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("character varying(10)");

                    b.Property<string>("StudentId")
                        .HasColumnType("text");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses", (string)null);
                });

            modelBuilder.Entity("Campus.Model.Course", b =>
                {
                    b.HasOne("Campus.Model.Teacher", null)
                        .WithMany("Courses")
                        .HasForeignKey("IdTeacher_code")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Campus.Model.Student", b =>
                {
                    b.HasOne("Campus.Model.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("IdSchool_code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Campus.Model.Teacher", b =>
                {
                    b.HasOne("Campus.Model.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("IdSchool_code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("StudentCourses", b =>
                {
                    b.HasOne("Campus.Model.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Campus.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Campus.Model.School", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Campus.Model.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
